{"version":3,"sources":["jsonconverter.js","App.js","serviceWorker.js","index.js"],"names":["JsonConverter","useState","inputValue","setInputValue","outputValue","setOutputValue","style","display","flexDirection","width","justifyContent","backgroundColor","alignItems","type","onChange","event","target","value","height","wordWrap","onClick","newObj","JSON","parse","console","log","categoriesToChange","category","docusignDetails","includes","currentCategory","newCategory","key","push","stringify","color","fontSize","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQAEe,SAASA,IAAiB,IAAD,EACFC,mBAAS,IADP,mBAC/BC,EAD+B,KACnBC,EADmB,OAEAF,mBAAS,IAFT,mBAE/BG,EAF+B,KAElBC,EAFkB,KA4CtC,OACE,6BACE,8CACA,yBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,MAAO,SACPC,eAAgB,eAChBC,gBAAiB,OACjBC,WAAY,WAGd,6BAEA,2BACEC,KAAK,OACLC,SAzDR,SAAqBC,GACnBZ,EAAcY,EAAMC,OAAOC,QAyDrBA,MAAOf,EACPI,MAAO,CACLK,gBAAiB,QACjBO,OAAQ,QACRT,MAAO,QACPU,SAAU,gBAGd,4BAAQC,QA9Dd,WACE,IAAMC,EAASC,KAAKC,MAAMrB,GAE1BsB,QAAQC,IAAIvB,GAKZ,IAAMwB,EAAqB,CACzB,uBACA,kBACA,mBACA,kBAGF,IAAK,IAAIC,KAAYN,EAAOO,gBAC1B,GAAIF,EAAmBG,SAASF,GAAhC,CACE,IAAMG,EAAkBT,EAAOO,gBAAgBD,GAC/CH,QAAQC,IAAIE,GACZ,IAAMI,EAAc,GACpB,IAAK,IAAIC,KAAOF,EACdC,EAAYE,KAAK,CAAED,IAAKA,EAAKf,MAAOa,EAAgBE,KAEtDR,QAAQC,IAAIM,GACZV,EAAOO,gBAAgBD,GAAYI,EASvC1B,EAAeiB,KAAKY,UAAUb,KA6BIf,MAAO,CAAEY,OAAQ,SAA/C,WAGA,6BACA,uBACEZ,MAAO,CACLK,gBAAiB,QACjBO,OAAQ,QACRT,MAAO,QACP0B,MAAO,QACPC,SAAU,MACVjB,SAAU,eAGXf,KCvEIiC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACtC,EAAD,SCGYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.d1b15491.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function JsonConverter() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [outputValue, setOutputValue] = useState(\"\");\n\n  function changeInput(event) {\n    setInputValue(event.target.value);\n  }\n\n  function convertJson() {\n    const newObj = JSON.parse(inputValue);\n    //JSON.parse(inputValue);\n    console.log(inputValue);\n    /* For the keys of mainDetailsData, meterDetailsData, usageRatesData \n      and auxilliaryDetailsData, convert each key-value pair into and object\n      with keys of key and value and values of the key and value given\n      */\n    const categoriesToChange = [\n      \"AuxiliaryDetailsData\",\n      \"MainDetailsData\",\n      \"MeterDetailsData\",\n      \"UsageRatesData\",\n    ];\n\n    for (let category in newObj.docusignDetails) {\n      if (categoriesToChange.includes(category)) {\n        const currentCategory = newObj.docusignDetails[category];\n        console.log(category);\n        const newCategory = [];\n        for (let key in currentCategory) {\n          newCategory.push({ key: key, value: currentCategory[key] });\n        }\n        console.log(newCategory);\n        newObj.docusignDetails[category] = newCategory;\n      } else {\n        continue;\n      }\n    }\n\n    //const convertedJson = JSON.stringify(newObj);\n    //console.log(convertedJson);\n\n    setOutputValue(JSON.stringify(newObj));\n  }\n\n  return (\n    <div>\n      <h4>JSON Converter</h4>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          width: \"1000px\",\n          justifyContent: \"space-evenly\",\n          backgroundColor: \"pink\",\n          alignItems: \"center\",\n        }}\n      >\n        <br></br>\n\n        <input\n          type=\"text\"\n          onChange={changeInput}\n          value={inputValue}\n          style={{\n            backgroundColor: \"white\",\n            height: \"100px\",\n            width: \"300px\",\n            wordWrap: \"break-word\",\n          }}\n        ></input>\n        <button onClick={convertJson} style={{ height: \"50px\" }}>\n          Convert\n        </button>\n        <br></br>\n        <p\n          style={{\n            backgroundColor: \"white\",\n            height: \"400px\",\n            width: \"300px\",\n            color: \"black\",\n            fontSize: \"8px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          {outputValue}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport JsonConverter from \"./jsonconverter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <JsonConverter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}